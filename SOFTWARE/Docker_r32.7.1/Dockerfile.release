# Filename: <Dockerfile>
# Copyright (C) <2023> Authors: <Antoine LEROUX, Christian ELMO>
# 
# This program is free software: you can redistribute it and / or 
# modify it under the terms of the GNU General Public License as published 
# by the Free Software Foundation, either version 2 of the License. 
# 
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of  
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
# GNU General Public License for more details.  
# 
# You should have received a copy of the GNU General Public License  
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Docker file for aarch64 based Jetson device

FROM nvcr.io/nvidia/l4t-base:r32.7.1


RUN sh -c "echo '/usr/local/cuda/lib64' >> /etc/ld.so.conf.d/nvidia-tegra.conf"

RUN ldconfig

RUN apt update && apt install -y python3.8 python3.8-dev
RUN rm /usr/bin/python
RUN ln -s /usr/bin/python3.8 /usr/bin/python
RUN rm /usr/bin/python3
RUN ln -s /usr/bin/python3.8 /usr/bin/python3

RUN apt-get install -y build-essential cmake git unzip pkg-config \
libjpeg-dev libpng-dev libtiff-dev \
libavcodec-dev libavformat-dev libswscale-dev \
libgtk2.0-dev libcanberra-gtk* \
libxvidcore-dev libx264-dev libgtk-3-dev \
libtbb2 libtbb-dev libdc1394-22-dev \
gstreamer1.0-tools libv4l-dev v4l-utils \
libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
libavresample-dev libvorbis-dev libxine2-dev \
libfaac-dev libmp3lame-dev libtheora-dev \
libopencore-amrnb-dev libopencore-amrwb-dev \
libopenblas-dev libatlas-base-dev libblas-dev \
liblapack-dev libeigen3-dev gfortran \
libhdf5-dev protobuf-compiler  \
libprotobuf-dev libgoogle-glog-dev libgflags-dev

RUN apt install -y python3-pip
RUN python -m pip --version
RUN python -m pip install cython 
RUN python -m pip install numpy

# Installing OPENCV
ARG OPENCV_VERSION="4.5.2"


RUN mkdir /opencv && \
    cd opencv && \
    git clone https://github.com/opencv/opencv.git && \
    git clone https://github.com/opencv/opencv_contrib.git 

RUN cd /opencv/opencv && git checkout ${OPENCV_VERSION} && \
    cd /opencv/opencv_contrib && git checkout ${OPENCV_VERSION}

ARG COMPUTE_CAPABILITY
RUN echo "Compute Capability of ${COMPUTE_CAPABILITY}" 

RUN mkdir -p /opencv/opencv/build && cd /opencv/opencv/build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
            -D CMAKE_INSTALL_PREFIX=/usr/local \
            -D OPENCV_EXTRA_MODULES_PATH=/opencv/opencv_contrib/modules \
            -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \
            -D WITH_OPENCL=OFF \
            -D WITH_CUDA=ON \
            -D CUDA_ARCH_BIN=${COMPUTE_CAPABILITY} \
            -D CUDA_ARCH_PTX="" \
            -D WITH_CUDNN=ON \
            -D WITH_CUBLAS=ON \
            -D ENABLE_FAST_MATH=ON \
            -D CUDA_FAST_MATH=ON \
            -D OPENCV_DNN_CUDA=ON \
            -D ENABLE_NEON=ON \
            -D WITH_QT=OFF \
            -D WITH_OPENMP=ON \
            -D WITH_OPENGL=ON \
            -D BUILD_TIFF=ON \
            -D WITH_FFMPEG=ON \
            -D WITH_GSTREAMER=ON \
            -D WITH_TBB=ON \
            -D BUILD_TBB=ON \
            -D BUILD_TESTS=OFF \
            -D WITH_EIGEN=ON \
            -D WITH_V4L=ON \
            -D WITH_LIBV4L=ON \
            -D OPENCV_ENABLE_NONFREE=ON \
            -D INSTALL_C_EXAMPLES=OFF \
            -D INSTALL_PYTHON_EXAMPLES=OFF \
            -D BUILD_opencv_python3=TRUE \
            -D OPENCV_GENERATE_PKGCONFIG=ON \
            -D BUILD_EXAMPLES=OFF \
            -D WITH_ARAVIS=OFF \
            -D BUILD_ARAVIS=OFF ..

RUN cd /opencv/opencv/build && make -j$(nproc)
RUN cd /opencv/opencv/build && \
        make install && \
        ldconfig && \
        apt update
RUN cd /opencv/opencv/build && make clean

RUN python -m pip install httptools
RUN python -m pip install adafruit-circuitpython-motorkit

RUN mkdir -p /usr/lib/python3/dist-packages/Jetson
COPY data/Jetson/ /usr/lib/python3/dist-packages/Jetson/

RUN apt-get install -y nano
RUN apt-get install -y sudo

# Needed for displaying IP address on OLED screen
RUN python -m pip install Adafruit_SSD1306
RUN python -m pip install pillow
# install ifconfig
RUN apt-get install -y net-tools

RUN python -m pip install packaging
RUN python -m pip install zmq

# used to create camera stream from python
#RUN apt-get install -y libgirepository1.0-dev
#RUN python -m pip install --ignore-installed PyGObject

#RUN apt-key adv --fetch-key https://repo.download.nvidia.com/jetson/jetson-ota-public.asc
#RUN echo "deb https://repo.download.nvidia.com/jetson/common r32 main" > /etc/apt/sources.list.d/nvidia-l4t-apt-source.list && \
#    echo "deb https://repo.download.nvidia.com/jetson/t210 r32 main" >> /etc/apt/sources.list.d/nvidia-l4t-apt-source.list && \
#    apt-get update
#COPY data/nv_boot_control.conf /etc/nv_boot_control.conf
#RUN apt install -y nvidia-l4t-jetson-multimedia-api

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
